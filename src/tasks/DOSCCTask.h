/**
 * @file DOSCCTask.h
 *
 * @author Moritz Bensberg
 * @date Jul 8, 2021
 * @copyright \n
 *  This file is part of the program Serenity.\n\n
 *  Serenity is free software: you can redistribute it and/or modify
 *  it under the terms of the LGNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of
 *  the License, or (at your option) any later version.\n\n
 *  Serenity is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.\n\n
 *  You should have received a copy of the LGNU Lesser General
 *  Public License along with Serenity.
 *  If not, see <http://www.gnu.org/licenses/>.\n
 */

#ifndef TASKS_DOSCCTASK_H_
#define TASKS_DOSCCTASK_H_

#include "tasks/GeneralizedDOSTask.h" //GDOS settings.
#include "tasks/Task.h"
#include "tasks/WavefunctionEmbeddingTask.h" //Wavefunction embedding task settings.
/* Include Std and External Headers */
#include <memory>
#include <vector>

namespace Serenity {

class SystemController;
class OrbitalPair;
class OrbitalTriple;

struct DOSCCTaskSettings {
  DOSCCTaskSettings() : alignOrbitals(true), dosSettings(Options::DOS_SETTINGS::NORMAL) {
    wfemb.loc.splitValenceAndCore = true;
    gdos.similarityLocThreshold = {};
    gdos.similarityKinEnergyThreshold = {};
  }
  REFLECTABLE((bool)alignOrbitals, (Options::DOS_SETTINGS)dosSettings)
 public:
  WavefunctionEmbeddingTaskSettings wfemb;
  GeneralizedDOSTaskSettings gdos;
  /**
   * @brief Choose the similarity thresholds for the DOS procedure based on the macro flag "dosSettings"
   *        if no manual input is given.
   */
  void resolveDOSSettings();
};
/**
 * @class
 * @brief This task combines the localization task, the generalized direct orbital selection (GDOS)
 *        task, and the wavefunction embedding task. It allows the user to calculate relative energies
 *        with a multi-level DLPNO-CC approach using the orbital sets generated by the GDOS. Furhtermore,
 *        it supports DOS-macro flags to easily select the DOS settings.
 */
class DOSCCTask : public Task {
 public:
  /**
   * @brief Constructor.
   * @param supersystem The supersystem controller.
   */
  DOSCCTask(std::vector<std::shared_ptr<SystemController>> supersystems);
  /**
   * @brief Default destructor.
   */
  ~DOSCCTask();
  /**
   * @see Task
   */
  void run();
  /**
   * @brief Parse the settings to the task settings.
   * @param c The task settings.
   * @param v The visitor which contains the settings strings.
   * @param blockname A potential block name.
   *
   * Resolve setting list given by multiple blocks of the same type.
   */
  void visit(DOSCCTaskSettings& c, set_visitor v, std::string blockname) {
    if (!blockname.compare("")) {
      visit_each(c, v);
      return;
    }
    if (c.wfemb.visitAsBlockSettings(v, blockname))
      return;
    if (c.wfemb.loc.visitAsBlockSettings(v, blockname))
      return;
    if (c.gdos.visitAsBlockSettings(v, blockname))
      return;

    int lastCharIndex = blockname.length() - 1;
    int regionIndex = -1;
    if (lastCharIndex > 0)
      regionIndex = std::stoi(blockname.substr(lastCharIndex, 1));
    if (regionIndex > (int)c.wfemb.lcSettings.size() || regionIndex < 0) {
      throw SerenityError((std::string) "Unknown block in DOSCCTaskSettings: " + blockname);
    }
    std::string reducedBlockName = blockname.substr(0, 2);
    LocalCorrelationSettings& lcSettings = c.wfemb.lcSettings[regionIndex];
    if (lcSettings.visitSettings(v, reducedBlockName))
      return;

    // If reached, the keyword is unknown.
    throw SerenityError((std::string) "Unknown block in DOSCCTaskSettings: " + blockname);
  }
  /**
   * @brief Settings.
   *   - alignOrbitals:        If true the orbitals are aligned.
   *   - dosSettings:          Macro flag for the DOS thresholds.
   *   - wfemb:                Settings for the embedded DLPNO-CC calculation.
   *   - gdos:                 Settings for the orbital set selection.
   */
  DOSCCTaskSettings settings;
  /**
   * @brief Getter for the relative energies.
   * @return The relative energies.
   */
  const Eigen::VectorXd& getRelativeEnergies();
  /**
   * @brief Getter for the total energies.
   * @return The total energies.
   */
  const Eigen::VectorXd& getTotalEnergies();

 private:
  // The supersystem controller.
  std::vector<std::shared_ptr<SystemController>> _supersystems;
  // The subsystem controller. One Set for each supersystem.
  std::vector<std::vector<std::shared_ptr<SystemController>>> _subSystems;
  /**
   * @brief Set up the subsystems.
   */
  void setUpSubsystems();
  /**
   * @brief Run the orbital localization and orbital alignment.
   */
  void localizeOrbitals();
  /**
   * @brief Run the orbital selection through the generalized DOS.
   */
  void runGDOS();
  /**
   * @brief Run the multi-level CC claculations.
   */
  Eigen::VectorXd runCC();
  /**
   * @brief Print the final results to the output.
   */
  void printResults(const Eigen::VectorXd& energies);

  /**
   * We need to initialize the vector containing the local correlation settings
   * upon construction of the task. At this point we do not know how many fragments
   * we will have. Thus, we will initialize the vector with _maxFragments set of
   * settings and drop the settings we do not need after settings parsing.
   */
  const unsigned int _maxFragments = 10;
  /**
   * @brief Number of fragments for each supersystem.
   */
  unsigned int _nFragments = 0;
  /**
   * @brief The total energies for each supersystem.
   */
  std::unique_ptr<Eigen::VectorXd> _totalEnergies;
  /**
   * @brief The relative energies for each supersystem with respect to
   *        the first supersystem energy.
   */
  std::unique_ptr<Eigen::VectorXd> _relativeEnergies;
};

} /* namespace Serenity */

#endif /* TASKS_DOSCCTASK_H_ */
